'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFileFilter = exports.getParser = undefined;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _coffeescript = require('coffeescript');

var _coffeescript2 = _interopRequireDefault(_coffeescript);

var _graphql = require('graphql');

var GraphQL = _interopRequireWildcard(_graphql);

var _FindGraphQLTags = require('relay-compiler/lib/FindGraphQLTags');

var _FindGraphQLTags2 = _interopRequireDefault(_FindGraphQLTags);

var _graphqlCompiler = require('graphql-compiler');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// Generated by CoffeeScript 2.2.1
var parseFile;

// Throws an error if parsing the file fails
parseFile = function parseFile(baseDir, file) {
  var ast, astDefinitions, i, len, ref, ref1, template, text;
  text = _fs2.default.readFileSync(_path2.default.join(baseDir, file.relPath), 'utf8');
  (0, _assert2.default)(text.indexOf('graphql') >= 0, 'RelayJSModuleParser: Files should be filtered before passed to the parser, got unfiltered file `#{file}`.');
  if ((ref = _path2.default.extname(file.relPath)) === '.coffee' || ref === '.cjsx') {
    text = _coffeescript2.default.compile(text);
  }
  astDefinitions = [];
  ref1 = _FindGraphQLTags2.default.memoizedFind(text, baseDir, file, {});
  for (i = 0, len = ref1.length; i < len; i++) {
    var _astDefinitions;

    template = ref1[i];
    template = template.replace(/\\n/g, '\n');
    ast = GraphQL.parse(new GraphQL.Source(template, file.relPath));
    (0, _assert2.default)(ast.definitions.length, 'RelayJSModuleParser: Expected GraphQL text to contain at least one definition (fragment, mutation, query, subscription), got `#{template}`.');
    (_astDefinitions = astDefinitions).push.apply(_astDefinitions, _toConsumableArray(ast.definitions));
  }
  return {
    kind: 'Document',
    definitions: astDefinitions
  };
};

var getParser = exports.getParser = function getParser(baseDir) {
  return new _graphqlCompiler.ASTCache({
    baseDir: baseDir,
    parse: parseFile
  });
};

var getFileFilter = exports.getFileFilter = function getFileFilter(baseDir) {
  return function (file) {
    return _fs2.default.readFileSync(_path2.default.join(baseDir, file.relPath), 'utf8').indexOf('graphql') >= 0;
  };
};